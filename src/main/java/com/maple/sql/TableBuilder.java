package com.maple.sql;

import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.*;

public class TableBuilder {


    public static void  main(String[] args) throws IOException {
        String sql;
        Integer lineNumber;
        List<String> list  = new ArrayList<String>();
        List<Integer> list2 = new ArrayList<Integer>();
        List<Integer[]> list3 = new ArrayList<Integer[]>();
        List<String> list4 = new ArrayList<String>();
        HashMap<String,Integer> hm = new HashMap<String,Integer>();
        StringBuffer sb = new StringBuffer();
        Integer[] intnum = new Integer[2];
        System.out.print("please input the CREATE sql:");
        Scanner sc = new Scanner(System.in);
        sql=sc.nextLine();
        System.out.print("please input the INSERT line number:");
        lineNumber=sc.nextInt();
        list=extract_keywords(sql);
        hm=datatype_map();
        for(int i=1;i<list.size();i++)
        {
            intnum=pick_datalenth(list.get(i));
            System.out.println(list.get(i));
            System.out.print("数据类型："+pick_datatype(list.get(i))+"       ");
            System.out.print("数据长度参数："+intnum[0]+"       "+intnum[1]+"       ");
            System.out.println("数据类型数组位置："+hm.get(pick_datatype(list.get(i))));
        }
        for(int i=1;i<list.size();i++)
        {
            list2.add(hm.get(pick_datatype(list.get(i))));
            list3.add(pick_datalenth(list.get(i)));
        }
        for(int n=0;n<lineNumber;n++)
        {
            sb.append("insert into ");
            sb.append(list.get(0));
            sb.append(" values(");
            for (int i = 0; i < list2.size(); i++) {
                intnum = list3.get(i);
                if (i == list2.size() - 1) {
                    sb.append(create_testdata(list2.get(i), intnum[0], intnum[1]));
                } else {
                    sb.append(create_testdata(list2.get(i), intnum[0], intnum[1]));
                    sb.append(',');
                }
            }
            sb.append(");");
            list4.add(sb.toString());
            sb = new StringBuffer();
        }
        System.out.println("the CREATE sentence generated by program is:");
        FileWriter fw = new FileWriter("./createTableSql.sql");
        for(int i=0;i<list4.size();i++)
        {
            System.out.println(list4.get(i));
            fw.write(list4.get(i));
        }

    }

    private static List<String> extract_keywords(String createSql)
    {
        List<String> list1  = new ArrayList<String>();
        StringBuffer sb = new StringBuffer();
        int m = createSql.indexOf("table");
        for(int a=m+6;a<createSql.indexOf('(');a++)
        {
            char ch = createSql.charAt(a);
            sb.append(ch);
        }
        list1.add(sb.toString());
        sb = new StringBuffer();
        for(int b=createSql.indexOf('(')+1;b<createSql.length()-2;b++)
        {
            char ch = createSql.charAt(b);
//            if(ch!=' '&&ch!=',')
//            {
//                sb.append(ch);
//            }
//            if(ch==' ')
//            {
//                sb = new StringBuffer();
//            }
//            if((ch==',')||createSql.charAt(b+2)==';')
//            {
//                list1.add(sb.toString());
//                sb = new StringBuffer();
//            }
            if(ch!=','||(ch==','&&createSql.charAt(b-2)=='('))
            {
                sb.append(ch);
            }
            if((ch==','&&createSql.charAt(b-2)!='(')||createSql.charAt(b+2)==';')
            {
                list1.add(sb.toString());
                sb=new StringBuffer();
            }

        }
        return list1;
    }

     private static HashMap<String,Integer> datatype_map()
    {
        String[] alldatatype= {"char","nchar","varchar2","nvarchar2","date","long","raw","long raw","blob","clob","nclob","bfile","number","int","float","real","binary_float","binary_double"};
        HashMap<String,Integer> hm1 = new HashMap<String,Integer>();
        for(int i=0;i<alldatatype.length;i++)
        {
            hm1.put(alldatatype[i],i);
        }
        return hm1;
    }

    private static String pick_datatype(String keywords)
    {
        StringBuffer sb = new StringBuffer();
//        for(int i=0;i<keywords.length();i++)
//        {
//            char ch=keywords.charAt(i);
//            if(ch!='(')
//            {
//                sb.append(ch);
//            }
//            else
//                break;
//        }
        for(int i=keywords.indexOf(' ')+1;i<keywords.length();i++)
        {
            char ch=keywords.charAt(i);
            sb.append(ch);
        }
        String str1=sb.toString();
        sb = new StringBuffer();
        for(int j=0;j<str1.length();j++)
        {
            char ch2=str1.charAt(j);
            if(ch2!='(')
            {
                sb.append(ch2);
            }
            else
                break;
        }
        return sb.toString();
    }
    private static Integer[] pick_datalenth(String keywords)
    {
        StringBuffer sb = new StringBuffer();
        Integer[] intnum = new Integer[2];
        if(keywords.indexOf('(')!=-1)
        {
            if(keywords.indexOf(',')!=-1)
            {
                for(int i=keywords.indexOf('(')+1;i<keywords.indexOf(',');i++)
                {
                    char ch = keywords.charAt(i);
                    sb.append(ch);
                }
                intnum[0]= Integer.parseInt(sb.toString());
                sb = new StringBuffer();
                for(int j=keywords.indexOf(',')+1;j<keywords.indexOf(')');j++)
                {
                    char ch2=keywords.charAt(j);
                    sb.append(ch2);
                }
                intnum[1]=Integer.parseInt(sb.toString());
            }
            else
            {
                for(int k=keywords.indexOf('(')+1;k<keywords.indexOf(')');k++)
                {
                    char ch3 = keywords.charAt(k);
                    sb.append(ch3);
                }
                intnum[0]=Integer.parseInt(sb.toString());
                intnum[1]=0;
            }
        }
        else
        {
            intnum[0]=0;
            intnum[1]=0;
        }
        return intnum;
    }

    private static String create_testdata(int m,int n,int k)
    {
        Date date=new Date();
        SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String time=format.format(date);
        StringBuffer sb = new StringBuffer();
        Random rd = new Random();
        String[] str_short = {"12","你","ab","23","cd","好",""};
        String[] str_long = {"你好ac123./@我很好12","测试数据123@#￥%&","我you123数据+—",""};
        String str_f="BINARY_FLOAT_INFINITY";
        String str_d="BINARY_DOUBLE_INFINITY";
        switch (m)
        {
            case 0:
            case 2:
                sb.append("'");
                if(n<20)
                {
                    for(int i=0;i<n/2;i++)
                    {
                        String str = str_short[rd.nextInt(7)];
                        sb.append(str);
                    }
                }
                else
                {
                    for(int i=0;i<n/20;i++)
                    {
                        String str2 = str_long[rd.nextInt(4)];
                        sb.append(str2);
                    }
                }
                sb.append("'");
                break;
            case 1:
            case 3:
                sb.append("'");
                if(n<40)
                {
                    for(int i=0;i<n/4;i++)
                    {
                        String str = str_short[rd.nextInt(7)];
                        sb.append(str);
                    }
                }
                else
                {
                    for(int i=0;i<n/40;i++)
                    {
                        String str2 = str_long[rd.nextInt(4)];
                        sb.append(str2);
                    }
                }
                sb.append("'");
                break;
            case 4:
                sb.append("to_date('");
                sb.append(time);
                sb.append("','yyyy-mm-dd hh24:mi:ss')");
                break;
            case 5:
                sb.append("'");
                for(int i=0;i<(rd.nextInt(6001)+2000)/20;i++)
                {
                    String str = str_long[rd.nextInt(4)];
                    sb.append(str);
                }
                sb.append("'");
                break;
            case 6:
                sb.append("utl_raw.cast_to_raw('");
                if(n<40)
                {
                    for(int i=0;i<n/2;i++)
                    {
                        String str = str_short[rd.nextInt(7)];
                        sb.append(str);
                    }

                }
                else
                {
                    for(int j=0;j<n/20;j++)
                    {
                        String str2 = str_long[rd.nextInt(4)];
                        sb.append(str2);
                    }
                }
                sb.append("')");
                break;
            case 7:
                sb.append("utl_raw.cast_to_raw('");
                for(int i=0;i<(rd.nextInt(2001)+2000)/20;i++)
                {
                    String str = str_long[rd.nextInt(4)];
                    sb.append(str);
                }
                sb.append("')");
                break;
            case 8:
                sb.append("to_blob('");
                for(int i=0;i<(rd.nextInt(6000)+2000);i++)
                {
                    sb.append(rd.nextInt(2));
                }
                sb.append("')");
                break;
            case 9:
            case 10:
                sb.append("'");
                for(int i=0;i<(rd.nextInt(6001)+2000)/20;i++)
                {
                    String str = str_long[rd.nextInt(4)];
                    sb.append(str);
                }
                sb.append("'");
                break;
            case 11:
                sb.append("BFILENAME('tmpdir', '~/tmp.txt')");
                break;
            case 12:
                if(k!=0)
                {
                    int num1=rd.nextInt(n-1)+1;
                    if(rd.nextInt(2)==1)
                    {
                        sb.append('-');
                    }
                    for(int i=0;i<num1;i++)
                    {
                        sb.append(rd.nextInt(10));
                    }
                    sb.append('.');
                    for(int j=0;j<rd.nextInt(k)+1;j++)
                    {
                        sb.append(rd.nextInt(10));
                    }
                }
                else
                {
                    int num2=rd.nextInt(m)+1;
                    if(rd.nextInt(2)==1)
                    {
                        sb.append('-');
                    }
                    for(int i=0;i<num2;i++)
                    {
                        sb.append(rd.nextInt(10));
                    }
                }
                break;
            case 13:
                for(int i=0;i<rd.nextInt(22);i++)
                {
                    sb.append(rd.nextInt(10));
                }
                break;
            case 14:
            case 15:
                if(rd.nextInt(2)==1)
                {
                    sb.append('-');
                }
                for(int i=0;i<rd.nextInt(4)+2;i++)
                {
                    sb.append(rd.nextInt(10));
                }
                sb.append('.');
                for(int j=0;j<rd.nextInt(4)+2;j++)
                {
                    sb.append(rd.nextInt(10));
                }
                break;
            case 16:
                int randnum=rd.nextInt(2);
                if(randnum==0)
                {
                    sb.append(str_f);
                }
                else
                {
                    if(rd.nextInt(2)==1)
                    {
                        sb.append('-');
                    }
                    for(int i=0;i<rd.nextInt(4)+2;i++)
                    {
                        sb.append(rd.nextInt(10));
                    }
                    sb.append('.');
                    for(int j=0;j<rd.nextInt(4)+2;j++)
                    {
                        sb.append(rd.nextInt(10));
                    }
                    sb.append('f');
                }
                break;
            case 17:
                int randnum2=rd.nextInt(2);
                if(randnum2==0)
                {
                    sb.append(str_d);
                }
                else
                {
                    if(rd.nextInt(2)==1)
                    {
                        sb.append('-');
                    }
                    for(int i=0;i<rd.nextInt(4)+2;i++)
                    {
                        sb.append(rd.nextInt(10));
                    }
                    sb.append('.');
                    for(int j=0;j<rd.nextInt(4)+2;j++)
                    {
                        sb.append(rd.nextInt(10));
                    }
                    sb.append('d');
                }
                break;
            default:
                System.out.println("the data type you've inputed is wrong.");
                System.exit(-1);
        }
        return  sb.toString();
    }

}


